{"ast":null,"code":"import { User } from \"./user\";\nimport { map, catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    constructor(http) {\n      this.http = http;\n      this.errorMessage = \"\";\n    }\n\n    getUsers() {\n      return this.http.get(\"assets/users.json\").pipe(map(data => {\n        let usersList = data[\"userList\"];\n        return usersList.map(function (user) {\n          return new User(user.userName, user.userAge);\n        });\n      }), catchError(err => {\n        console.log(err, \"Чет пошло не так\");\n        this.errorMessage = err.message; // Ошибка собственно представляет объект, из которого мы можем получить ряд данных.\n        // В частности, свойство message позволяет получить сообщение об ошибке,\n        // а свойство status - статусный код ответа.\n        // Так, в данном случае вся обработка заключается в том, что этот объект выводится на консоль,\n        // а свойству errorMessage сервиса передается сообщение об ошибке(если запрос прошел успешно,\n        // то этому свойству присваивается пустая строка).\n\n        return [];\n      }));\n    }\n\n  }\n\n  HttpService.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  HttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac\n  });\n  return HttpService;\n})();","map":null,"metadata":{},"sourceType":"module"}